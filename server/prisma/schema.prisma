generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ExerciseCategory {
  CHEST
  BACK
  LEGS
  ARMS
  SHOULDERS
  CORE
  CARDIO
  FULLBODY
  OTHER
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  createdAt    DateTime      @default(now())
  workoutPlans WorkoutPlan[]
  mealPlans    MealPlan[]
}

model WorkoutPlan {
  id        String         @id @default(uuid())
  title     String
  goal      String // e.g., "fat loss", "strength"
  createdAt DateTime       @default(now())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  entries   WorkoutEntry[]
}

model WorkoutEntry {
  id            String            @id @default(uuid())
  date          DateTime
  exercise      String // e.g., "Bench Press"
  sets          Int
  reps          Int
  weight        Float // lbs or kg
  duration      Int? // exercise duration in seconds (for time-based exercises)
  restDuration  Int? // rest duration in seconds
  category      ExerciseCategory?
  createdAt     DateTime          @default(now())
  workoutPlan   WorkoutPlan       @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId String
}

model MealPlan {
  id        String      @id @default(uuid())
  title     String
  goal      String // e.g., "low carb", "muscle gain"
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  meals     MealEntry[]
}

model MealEntry {
  id         String   @id @default(uuid())
  name       String // e.g., "Chicken & Rice"
  calories   Int
  protein    Int
  carbs      Int
  fat        Int
  date       DateTime
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id])
  mealPlanId String
}

model Exercise {
  id          String           @id @default(uuid())
  name        String           @unique // e.g., "Squat"
  description String? // Optional description
  category    ExerciseCategory
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  workoutLogs WorkoutLog[]
}

model WorkoutLog {
  id           String           @id @default(uuid())
  userId       String
  exerciseId   String
  exerciseName String // Denormalized for performance and flexibility
  category     ExerciseCategory
  sets         Int
  reps         Int
  weight       Float // lbs or kg
  duration     Int? // exercise duration in seconds (for time-based exercises)
  restDuration Int? // rest duration in seconds
  notes        String? // Optional notes - can include cardio metrics as JSON
  date         DateTime         @default(now())
  createdAt    DateTime         @default(now())

  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@index([userId, date])
  @@index([exerciseId])
}
